{"version":3,"sources":["../../src/db/index.js"],"names":["contactOne","_id","baseUrl","doc","Contact","findById","photo","constant","PHOTO_URL","contactsAll","pageno","pagesize","contacts","find","sort","skip","limit","map","c","name","tel","address","count","countDocuments","totalcount","searchContact","length","Error","RegExp","index","insertContact","ObjectId","toHexString","c1","save","status","message","updateContact","updateOne","ok","n","deleteContact","delDoc","photo_id","substr","Photo","deleteOne","streamToBuffer","stream","Promise","resolve","reject","buffers","on","data","push","Buffer","concat","storeImageToDB","mimetype","shortid","generate","image","changePhoto","upload","startsWith","updatedDoc"],"mappings":"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","file":"index.js","sourcesContent":["import { ObjectId } from 'mongodb'\r\nimport { Contact, Photo, mongoose } from './testdb';\r\nimport constant from '../constant';\r\nimport shortid from 'shortid';\r\n\r\nexport const contactOne = async ({ _id, baseUrl }) => {\r\n    if (typeof(_id) !== \"string\" && _id == \"\") _id = \"not passed\";\r\n    let doc = await Contact.findById(_id);\r\n    if (doc) { \r\n        doc.photo = baseUrl + constant.PHOTO_URL + doc.photo;\r\n        return doc; \r\n    }\r\n    return { _id };\r\n}\r\n\r\nexport const contactsAll = async ({ pageno, pagesize, baseUrl }) => {\r\n    if (typeof(pageno) !== \"number\" || pageno < 0) pageno = 0;\r\n    if (typeof(pagesize) !== \"number\") pagesize = 5;\r\n    let contacts;\r\n    if (pageno === 0) {\r\n        pagesize=0;\r\n        contacts = await Contact.find().sort({ _id: -1 });\r\n    } else {\r\n        contacts = await Contact.find().sort({ _id: -1 }).skip((pageno-1)*pagesize).limit(pagesize);\r\n    }\r\n    contacts = contacts.map((c)=> {\r\n        let { _id, name, tel, address, photo } = c;\r\n        return { _id, name, tel, address, photo: baseUrl + constant.PHOTO_URL + photo}\r\n    })\r\n    let count = await Contact.countDocuments();\r\n    return { pageno, pagesize, totalcount:count, contacts };\r\n}\r\n\r\nexport const searchContact = async({ name, baseUrl }) => {\r\n    if (typeof(name) !== \"string\" || name.length < 2) {\r\n        throw new Error(\"두글자 이상의 이름을 입력하세요\");\r\n    }\r\n    let contacts = await Contact.find({ name: new RegExp(name, \"i\")}).sort({name:1});\r\n    contacts = contacts.map((c,index)=> {\r\n        let { _id, name, tel, address, photo } = c;\r\n        return { _id, name, tel, address, photo: baseUrl + constant.PHOTO_URL + photo }\r\n    })\r\n    return contacts;\r\n}\r\n\r\nexport const insertContact = async ({ name, tel, address, photo }) => {\r\n    if (typeof(photo) === \"undefined\" || photo == null) {\r\n        photo = 'noimage';\r\n    }\r\n    let _id = new ObjectId().toHexString();\r\n    let c1 = new Contact({\r\n        _id, name, tel, address, photo\r\n    })\r\n    let doc = await c1.save()\r\n    return { status: \"ok\", message:\"연락처 추가 성공\", _id: doc._id };\r\n} \r\n\r\nexport const updateContact = async ({ _id, name, tel, address }) => {\r\n    if (typeof(_id) === \"undefined\") {\r\n        return { status: \"fail\", message:\"_id 필드는 반드시 전달해야 합니다.\" };\r\n    }\r\n    let doc = await Contact.updateOne({ _id: _id }, { name, tel, address })\r\n    if (doc.ok === 1 && doc.n === 1) {\r\n        return { status:\"ok\", message:\"업데이트 성공\", _id:_id };\r\n    } else {\r\n        return { status:\"fail\", message:\"업데이트 실패\" };\r\n    }\r\n}\r\n\r\nexport const deleteContact = async ({ _id }) => {\r\n    if (typeof(_id) === \"undefined\") {\r\n        return { status: \"fail\", message:\"_id 필드는 반드시 전달해야 합니다.\" };\r\n    }\r\n    let delDoc = await contactOne({ _id, baseUrl: \"\" });\r\n    if (delDoc.photo !== constant.PHOTO_URL + \"noimage\") {\r\n        let photo_id = delDoc.photo.substr(constant.PHOTO_URL.length);\r\n        await Photo.deleteOne({ _id: photo_id });\r\n    }\r\n\r\n    let doc = await Contact.deleteOne({ _id:_id });\r\n    if (doc.ok === 1 && doc.n === 1) {\r\n        return { status:\"ok\", message:\"삭제 성공\", _id:_id };\r\n    } else {\r\n        return { status:\"fail\", message:\"삭제 실패\" };\r\n    }\r\n}\r\n\r\nconst streamToBuffer = async (stream) => {  \r\n    return new Promise((resolve, reject) => {\r\n        let buffers = [];\r\n        stream.on('error', reject);\r\n        stream.on('data', (data) => buffers.push(data));\r\n        stream.on('end', () => resolve(Buffer.concat(buffers)));\r\n    });\r\n}  \r\n\r\nconst storeImageToDB = async ({stream, mimetype}) => {\r\n    let photo = new Photo();\r\n    photo._id = shortid.generate();\r\n    photo.image = await streamToBuffer(stream);\r\n    photo.mimetype = mimetype;\r\n    await photo.save();\r\n    return photo._id;\r\n}\r\n\r\nexport const changePhoto = async (_id, upload)=> {\r\n    const { stream, mimetype } = await upload;\r\n    if (!mimetype.startsWith(\"image/\")) {\r\n        return { status:\"fail\", message:\"이미지만 업로드 가능합니다.\" };\r\n    }\r\n    //기존 이미지 삭제(noimage가 아닐 경우만)\r\n    let doc = await contactOne({ _id, baseUrl: \"\" });\r\n    if (doc.photo !== constant.PHOTO_URL + \"noimage\") {\r\n        let photo_id = doc.photo.substr(constant.PHOTO_URL.length);\r\n        await Photo.deleteOne({ _id: photo_id });\r\n    }\r\n\r\n    const photo_id = await storeImageToDB({ stream, mimetype })\r\n\r\n    let updatedDoc = await Contact.updateOne({ _id: _id }, { photo: photo_id })\r\n    if (updatedDoc.ok === 1 && updatedDoc.n === 1) {\r\n        return { status:\"ok\", message: `사진 변경 성공 => photo_id : ${photo_id})`, _id:_id };\r\n    } else {\r\n        return { status:\"fail\", message:\"사진 변경 실패\" };\r\n    }\r\n}\r\n\r\n"]}
{"version":3,"sources":["../src/index.js"],"names":["server","GraphQLServer","typeDefs","resolvers","context","request","response","express","use","req","res","console","log","params","id","doc","Photo","findOne","_id","setHeader","mimetype","end","image","status","options","endpoint","playground","uploads","maxFileSize","formatResponse","query","body","formatError","error","start","port"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,MAAMA,SAAS,IAAIC,0BAAJ,CAAkB;AAC7BC,YAAUA,gBADmB;AAE7BC,aAAUA,mBAFmB;AAG7BC,WAAS,CAAC,EAACC,OAAD,EAAUC,QAAV,EAAD,KAAyB;AAChC,WAAO,EAAED,OAAF,EAAWC,QAAX,EAAP;AACD;AAL4B,CAAlB,CAAf;;AAQAN,OAAOO,OAAP,CAAeC,GAAf,CAAmB,aAAnB;AAAA,+BAAkC,WAAOC,GAAP,EAAWC,GAAX,EAAkB;AAClDC,YAAQC,GAAR,CAAYH,IAAII,MAAJ,CAAWC,EAAvB;AACA,QAAIC,MAAM,MAAMC,cAAMC,OAAN,CAAc,EAAEC,KAAKT,IAAII,MAAJ,CAAWC,EAAlB,EAAd,CAAhB;AACA,QAAIC,GAAJ,EAAS;AACPL,UAAIS,SAAJ,CAAc,cAAd,EAA8BJ,IAAIK,QAAlC;AACAV,UAAIW,GAAJ,CAAQN,IAAIO,KAAZ;AACD,KAHD,MAGO;AACLZ,UAAIa,MAAJ,CAAW,GAAX;AACAb,UAAIW,GAAJ;AACD;AACF,GAVD;;AAAA;AAAA;AAAA;AAAA;;AAYA,MAAMG,UAAU;AACZC,YAAU,UADE;AAEZC,cAAY,GAFA;AAGZC,WAAU,EAAEC,aAAc,OAAK,IAAL,GAAU,CAA1B,EAHE;AAIZC,kBAAgB,CAACnB,GAAD,EAAMoB,KAAN,KAAgB;AAC9BnB,YAAQC,GAAR,CAAYkB,MAAM1B,OAAN,CAAcC,OAAd,CAAsB0B,IAAlC;AACA,WAAOrB,GAAP;AACD,GAPW;AAQZsB,eAAc,CAACC,KAAD,EAAQH,KAAR,KAAiB;AAC7BnB,YAAQC,GAAR,CAAYqB,KAAZ;AACA,WAAOA,KAAP;AACD;AACD;AAZY,CAAhB;;AAeAjC,OAAOkC,KAAP,CAAaV,OAAb,EAAsB,CAAC,EAAEW,IAAF,EAAD,KACpBxB,QAAQC,GAAR,CACG,uCAAsCuB,IAAK,GAD9C,CADF","file":"index.js","sourcesContent":["import { GraphQLServer } from 'graphql-yoga';\nimport resolvers from './graphql/resolvers';\nimport typeDefs from './graphql/schema';\nimport { Photo } from './db/testdb';\n\n\nconst server = new GraphQLServer({\n    typeDefs: typeDefs,\n    resolvers:resolvers,\n    context: ({request, response}) => {\n      return { request, response };\n    }\n})\n\nserver.express.use(\"/photos/:id\", async (req,res)=> {\n  console.log(req.params.id);\n  let doc = await Photo.findOne({ _id: req.params.id });\n  if (doc) {\n    res.setHeader('Content-Type', doc.mimetype);\n    res.end(doc.image);\n  } else {\n    res.status(404);\n    res.end();\n  }\n})\n\nconst options = {\n    endpoint: '/graphql',\n    playground: '/',\n    uploads : { maxFileSize : 1024*1024*4 },\n    formatResponse: (res, query) => {\n      console.log(query.context.request.body)\n      return res;\n    },\n    formatError : (error, query)=> {\n      console.log(error);\n      return error;\n    },\n    //port: 8080\n}\n\nserver.start(options, ({ port }) =>\n  console.log(\n    `GraphQL Server is running!! (port : ${port})`,\n  ),\n)"]}
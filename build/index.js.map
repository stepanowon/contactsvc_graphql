{"version":3,"sources":["../src/index.js"],"names":["server","GraphQLServer","typeDefs","resolvers","context","request","response","express","use","req","res","doc","Photo","findOne","_id","params","id","setHeader","mimetype","end","image","status","next","header","options","endpoint","playground","uploads","maxFileSize","formatResponse","query","formatError","error","console","log","start","port"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAGA,MAAMA,SAAS,IAAIC,0BAAJ,CAAkB;AAC7BC,YAAUA,gBADmB;AAE7BC,aAAUA,mBAFmB;AAG7BC,WAAS,CAAC,EAACC,OAAD,EAAUC,QAAV,EAAD,KAAyB;AAChC,WAAO,EAAED,OAAF,EAAWC,QAAX,EAAP;AACD;AAL4B,CAAlB,CAAf;;AAQAN,OAAOO,OAAP,CAAeC,GAAf,CAAmB,aAAnB;AAAA,+BAAkC,WAAOC,GAAP,EAAWC,GAAX,EAAkB;AAClD,QAAIC,MAAM,MAAMC,cAAMC,OAAN,CAAc,EAAEC,KAAKL,IAAIM,MAAJ,CAAWC,EAAlB,EAAd,CAAhB;AACA,QAAIL,GAAJ,EAAS;AACPD,UAAIO,SAAJ,CAAc,cAAd,EAA8BN,IAAIO,QAAlC;AACAR,UAAIS,GAAJ,CAAQR,IAAIS,KAAZ;AACD,KAHD,MAGO;AACLV,UAAIW,MAAJ,CAAW,GAAX;AACAX,UAAIS,GAAJ;AACD;AACF,GATD;;AAAA;AAAA;AAAA;AAAA;;AAWAnB,OAAOO,OAAP,CAAeC,GAAf,CAAmB,UAAUC,GAAV,EAAeC,GAAf,EAAoBY,IAApB,EAA0B;AAC3CZ,MAAIa,MAAJ,CAAW,eAAX,EAA4B,8CAA5B;AACAb,MAAIa,MAAJ,CAAW,SAAX,EAAsB,IAAtB;AACAb,MAAIa,MAAJ,CAAW,QAAX,EAAqB,UAArB;AACAD;AACD,CALD;;AAOA,MAAME,UAAU;AACZC,YAAU,UADE;AAEZC,cAAY,GAFA;AAGZC,WAAU,EAAEC,aAAc,OAAK,IAAL,GAAU,CAA1B,EAHE;AAIZC,kBAAgB,CAACnB,GAAD,EAAMoB,KAAN,KAAgB;AAC9B,WAAOpB,GAAP;AACD,GANW;AAOZqB,eAAc,CAACC,KAAD,EAAQF,KAAR,KAAiB;AAC7BG,YAAQC,GAAR,CAAYF,KAAZ;AACA,WAAOA,KAAP;AACD;AACD;AAXY,CAAhB;;AAcAhC,OAAOmC,KAAP,CAAaX,OAAb,EAAsB,CAAC,EAAEY,IAAF,EAAD,KACpBH,QAAQC,GAAR,CACG,uCAAsCE,IAAK,GAD9C,CADF","file":"index.js","sourcesContent":["import { GraphQLServer } from 'graphql-yoga';\r\nimport resolvers from './graphql/resolvers';\r\nimport typeDefs from './graphql/schema';\r\nimport { Photo } from './db/testdb';\r\n\r\n\r\nconst server = new GraphQLServer({\r\n    typeDefs: typeDefs,\r\n    resolvers:resolvers,\r\n    context: ({request, response}) => {\r\n      return { request, response };\r\n    }\r\n})\r\n\r\nserver.express.use(\"/photos/:id\", async (req,res)=> {\r\n  let doc = await Photo.findOne({ _id: req.params.id });\r\n  if (doc) {\r\n    res.setHeader('Content-Type', doc.mimetype);\r\n    res.end(doc.image);\r\n  } else {\r\n    res.status(404);\r\n    res.end();\r\n  }\r\n})\r\n\r\nserver.express.use(function (req, res, next) {\r\n  res.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\r\n  res.header('Expires', '-1');\r\n  res.header('Pragma', 'no-cache');\r\n  next()\r\n});\r\n\r\nconst options = {\r\n    endpoint: '/graphql',\r\n    playground: '/',\r\n    uploads : { maxFileSize : 1024*1024*4 },\r\n    formatResponse: (res, query) => {\r\n      return res;\r\n    },\r\n    formatError : (error, query)=> {\r\n      console.log(error);\r\n      return error;\r\n    },\r\n    //port: 8080\r\n}\r\n\r\nserver.start(options, ({ port }) =>\r\n  console.log(\r\n    `GraphQL Server is running!! (port : ${port})`,\r\n  ),\r\n)"]}